{"ast":null,"code":"var _jsxFileName = \"F:\\\\programming\\\\\\u05E8\\u05D0\\u05D9\\u05D5\\u05E0\\u05D5\\u05EA\\\\project\\\\project\\\\src\\\\Favorites.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState, useContext } from 'react'; // import AutomaticCities from './AutomaticCities';\n\nimport { connect } from 'react-redux';\nimport { get_from_axios } from './actions';\nimport WeatherToday from './WeatherToday';\nimport Try from './Try';\nimport WeatherForFavorite from './WeatherForFavorite';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Favorites({\n  currentWeather,\n  get_from_axios\n}) {\n  _s();\n\n  let favorites = [];\n  let favoritesData = [];\n  let location = '215854';\n\n  const fetchFavoritesCities = () => {\n    if (localStorage.favorites) {\n      favorites = JSON.parse(localStorage.getItem('favorites'));\n      debugger;\n    }\n  };\n\n  useEffect(() => {\n    fetchFavoritesCities();\n    debugger;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [0, 1, 2, 3, 4].map(value => {\n      var _props$weatherForFive, _props$weatherForFive2;\n\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          className: `${classes.paper} weatherToNextDay`,\n          children: [console.log(props.weatherForFive), console.log(days[new Date(props.weatherForFive.DailyForecasts[value].Date.substring(0, 10)).getDay()]), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"day\",\n            children: [days[new Date(props.weatherForFive.DailyForecasts[value].Date.substring(0, 10)).getDay()], \"     \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"min\",\n            children: [\"Min: \", (_props$weatherForFive = props.weatherForFive.DailyForecasts[value].Temperature) === null || _props$weatherForFive === void 0 ? void 0 : _props$weatherForFive.Minimum.Value]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"max\",\n            children: [\"Max: \", (_props$weatherForFive2 = props.weatherForFive.DailyForecasts[value].Temperature) === null || _props$weatherForFive2 === void 0 ? void 0 : _props$weatherForFive2.Maximum.Value]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this)\n      }, value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Favorites, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Favorites;\n\nconst mapStateToProps = state => {\n  return {\n    currentWeather: state.currentWeather\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    get_from_axios: location => dispatch(get_from_axios(location))\n  }; // return {get_from_axios: (cur) => dispatch(get_from_axios(cur)) }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);\n\nvar _c;\n\n$RefreshReg$(_c, \"Favorites\");","map":{"version":3,"sources":["F:/programming/ראיונות/project/project/src/Favorites.js"],"names":["React","createContext","useEffect","useState","useContext","connect","get_from_axios","WeatherToday","Try","WeatherForFavorite","Grid","Paper","Favorites","currentWeather","favorites","favoritesData","location","fetchFavoritesCities","localStorage","JSON","parse","getItem","map","value","classes","paper","console","log","props","weatherForFive","days","Date","DailyForecasts","substring","getDay","Temperature","Minimum","Value","Maximum","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState, useContext } from 'react';\r\n// import AutomaticCities from './AutomaticCities';\r\nimport { connect } from 'react-redux';\r\nimport { get_from_axios } from './actions'\r\nimport WeatherToday from './WeatherToday'\r\nimport Try from './Try'\r\nimport WeatherForFavorite from './WeatherForFavorite';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\n\r\nfunction Favorites({ currentWeather, get_from_axios }) {\r\n    let favorites = []\r\n    let favoritesData = []\r\n    let location = '215854'\r\n    const fetchFavoritesCities = () => {\r\n        if (localStorage.favorites) {\r\n            favorites = JSON.parse(localStorage.getItem('favorites'));\r\n            debugger;\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        fetchFavoritesCities()\r\n        debugger;\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {/* {<Try />} */}\r\n\r\n            {[0, 1, 2, 3, 4].map((value) => (\r\n            <Grid key={value} item>\r\n              <Paper className={`${classes.paper} weatherToNextDay`}>\r\n                {/* <span>date: {props.weatherForFive.Headline.EffectiveDate}</span> */}\r\n                {console.log(props.weatherForFive)}\r\n                {console.log(days[(new Date(props.weatherForFive.DailyForecasts[value].Date.substring(0, 10))).getDay()])}\r\n                {/* <span>{((new Date(props.weatherForFive.DailyForecasts[value].Date.substring(0, 10))))}</span> */}\r\n                <span className=\"day\">{days[(new Date(props.weatherForFive.DailyForecasts[value].Date.substring(0, 10))).getDay()]}     </span>\r\n                <span className=\"min\">Min: {props.weatherForFive.DailyForecasts[value].Temperature?.Minimum.Value}</span>\r\n                <span className=\"max\">Max: {props.weatherForFive.DailyForecasts[value].Temperature?.Maximum.Value}</span>\r\n              </Paper>\r\n\r\n            </Grid>\r\n          ))}\r\n            {/* {console.log(favoritesData)\r\n            }\r\n            {favoritesData.map(fav => {\r\n                debugger;\r\n                <h1>hghggj</h1>;\r\n                <Try />;\r\n                <WeatherToday weatherToday={fav} />;\r\n                \r\n            })} */}\r\n            \r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentWeather: state.currentWeather,\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        get_from_axios: (location) => dispatch(get_from_axios(location)),\r\n    }\r\n    // return {get_from_axios: (cur) => dispatch(get_from_axios(cur)) }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);"]},"metadata":{},"sourceType":"module"}