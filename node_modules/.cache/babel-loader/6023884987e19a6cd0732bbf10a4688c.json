{"ast":null,"code":"var _jsxFileName = \"F:\\\\programming\\\\\\u05E8\\u05D0\\u05D9\\u05D5\\u05E0\\u05D5\\u05EA\\\\project\\\\project\\\\src\\\\Favorites.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState, useContext, useStyles } from 'react'; // import AutomaticCities from './AutomaticCities';\n\nimport { connect } from 'react-redux';\nimport { get_from_axios } from './actions';\nimport WeatherToday from './WeatherToday';\nimport Try from './Try';\nimport WeatherForFavorite from './WeatherForFavorite';\nimport Menu from './Menu';\nimport { pushToFavorites } from './actions';\nimport Grid from '@material-ui/core/Grid';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport Paper from '@material-ui/core/Paper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Favorites(props) {\n  _s();\n\n  // const favorites = []\n  // let favoritesData = []\n  let location = '215854';\n  let data = {}; // const classes = useStyles();\n  // const fetchFavoritesCities = () => {\n  //     if (localStorage.favorites) {\n  //         favorites = JSON.parse(localStorage.getItem('favorites'));\n  //         debugger;\n  //     }\n  // }\n  // useEffect(() => {\n  //     fetchFavoritesCities()\n  //     debugger;\n  // }, [])\n\n  useEffect(() => {\n    const favoritesFromLocal = localStorage['favorites'] ? JSON.parse(localStorage['favorites']) : []; // console.log(favoritesFromLocal)\n\n    favoritesFromLocal.map(async fav => {\n      location = fav.cityKey;\n      console.log(location);\n      props.get_from_axios(location); // data = props.currentWeather\n      // console.log(data)\n      // props.pushToFavorites(data)\n    });\n  }, []); // useEffect(() =>{\n  //     console.log(props.pushToFavorites.length+\"   000000000000000000\")\n  // }, [props.pushToFavorites])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Menu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"FAVORITES\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), (console.log('props.favorites', props.favorites), props.favorites.map(fav =>\n    /*#__PURE__*/\n    // console.log(fav),\n    _jsxDEV(WeatherToday, {\n      weatherToday: fav\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }, this)) // console.log(props.favorites)\n    // props.favorites.map((fav) =>(\n    //     <WeatherToday weatherToday ={fav}/>\n    // ))\n    //     <Grid container justifyContent=\"center\">\n    //     {props.favorites.map((fav) => (\n    //       <Grid>\n    //         <Paper className={`${classes.paper} weatherToNextDay`}>\n    //           {/* <span>date: {props.weatherForFive.Headline.EffectiveDate}</span> */}\n    //           {/* {console.log(props.weatherForFive)} */}\n    //           {/* {console.log(days[(new Date(props.weatherForFive.DailyForecasts[value].Date.substring(0, 10))).getDay()])} */}\n    //           {/* <span>{((new Date(props.weatherForFive.DailyForecasts[value].Date.substring(0, 10))))}</span> */}\n    //           {/* <span className=\"day\">{days[(new Date(props.weatherForFive.DailyForecasts[value].Date.substring(0, 10))).getDay()]}     </span> */}\n    //           <span className=\"c\">Min: {fav.Temperature?.Metric.Value}</span>\n    //           {/* <span className=\"max\">Max: {props.weatherForFive.DailyForecasts[value].Temperature?.Maximum.Value}</span> */}\n    //         </Paper>\n    //       </Grid>\n    //     ))}\n    //   </Grid>\n    // \n    // <WeatherForFavorite cityKey={'45253'} cityName='Teresina' />\n    )]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this) // \n  ;\n}\n\n_s(Favorites, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Favorites;\n\nconst mapStateToProps = state => {\n  return {\n    favorites: state.favorites,\n    currentWeather: state.currentWeather\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    pushToFavorites: favFromLocal => dispatch(pushToFavorites(favFromLocal)),\n    get_from_axios: location => dispatch(get_from_axios(location))\n  }; // return {get_from_axios: (cur) => dispatch(get_from_axios(cur)) }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);\n\nvar _c;\n\n$RefreshReg$(_c, \"Favorites\");","map":{"version":3,"sources":["F:/programming/ראיונות/project/project/src/Favorites.js"],"names":["React","createContext","useEffect","useState","useContext","useStyles","connect","get_from_axios","WeatherToday","Try","WeatherForFavorite","Menu","pushToFavorites","Grid","FormLabel","FormControlLabel","RadioGroup","Radio","Paper","Favorites","props","location","data","favoritesFromLocal","localStorage","JSON","parse","map","fav","cityKey","console","log","favorites","mapStateToProps","state","currentWeather","mapDispatchToProps","dispatch","favFromLocal"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,EAAoDC,UAApD,EAAgEC,SAAhE,QAAiF,OAAjF,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AACtB;AACA;AACA,MAAIC,QAAQ,GAAG,QAAf;AACA,MAAIC,IAAI,GAAG,EAAX,CAJsB,CAMtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEApB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMqB,kBAAkB,GAAGC,YAAY,CAAC,WAAD,CAAZ,GAA4BC,IAAI,CAACC,KAAL,CAAWF,YAAY,CAAC,WAAD,CAAvB,CAA5B,GAAoE,EAA/F,CADY,CAEZ;;AACAD,IAAAA,kBAAkB,CAACI,GAAnB,CAAuB,MAAMC,GAAN,IAAc;AACjCP,MAAAA,QAAQ,GAAGO,GAAG,CAACC,OAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AACAD,MAAAA,KAAK,CAACb,cAAN,CAAqBc,QAArB,EAHiC,CAIjC;AACA;AACA;AACH,KAPD;AAQH,GAXQ,EAWN,EAXM,CAAT,CAnBsB,CAgCtB;AACA;AACA;;AAEA,sBACI;AAAA,4BACI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,GAIQS,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BX,KAAK,CAACY,SAArC,GACAZ,KAAK,CAACY,SAAN,CAAgBL,GAAhB,CAAqBC,GAAD;AAAA;AAChB;AACA,YAAC,YAAD;AAAc,MAAA,YAAY,EAAEA;AAA5B;AAAA;AAAA;AAAA;AAAA,YAFJ,CALR,CAUQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA/BR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAmCI;AAnCJ;AAqCH;;GAzEQT,S;;KAAAA,S;;AA0ET,MAAMc,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHF,IAAAA,SAAS,EAAEE,KAAK,CAACF,SADd;AAEHG,IAAAA,cAAc,EAAED,KAAK,CAACC;AAFnB,GAAP;AAIH,CALD;;AAMA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHzB,IAAAA,eAAe,EAAG0B,YAAD,IAAkBD,QAAQ,CAACzB,eAAe,CAAC0B,YAAD,CAAhB,CADxC;AAEH/B,IAAAA,cAAc,EAAGc,QAAD,IAAcgB,QAAQ,CAAC9B,cAAc,CAACc,QAAD,CAAf;AAFnC,GAAP,CADmC,CAKnC;AACH,CAND;;AAOA,eAAef,OAAO,CAAC2B,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CjB,SAA7C,CAAf","sourcesContent":["import React, { createContext, useEffect, useState, useContext, useStyles } from 'react';\r\n// import AutomaticCities from './AutomaticCities';\r\nimport { connect } from 'react-redux';\r\nimport { get_from_axios } from './actions'\r\nimport WeatherToday from './WeatherToday'\r\nimport Try from './Try'\r\nimport WeatherForFavorite from './WeatherForFavorite';\r\nimport Menu from './Menu'\r\nimport { pushToFavorites } from './actions'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nfunction Favorites(props) {\r\n    // const favorites = []\r\n    // let favoritesData = []\r\n    let location = '215854'\r\n    let data = {}\r\n\r\n    // const classes = useStyles();\r\n\r\n    // const fetchFavoritesCities = () => {\r\n    //     if (localStorage.favorites) {\r\n    //         favorites = JSON.parse(localStorage.getItem('favorites'));\r\n    //         debugger;\r\n    //     }\r\n    // }\r\n    // useEffect(() => {\r\n    //     fetchFavoritesCities()\r\n    //     debugger;\r\n    // }, [])\r\n\r\n    useEffect(() => {\r\n        const favoritesFromLocal = localStorage['favorites'] ? JSON.parse(localStorage['favorites']) : [];\r\n        // console.log(favoritesFromLocal)\r\n        favoritesFromLocal.map(async(fav) => {\r\n            location = fav.cityKey\r\n            console.log(location)\r\n            props.get_from_axios(location)\r\n            // data = props.currentWeather\r\n            // console.log(data)\r\n            // props.pushToFavorites(data)\r\n        })\r\n    }, [])\r\n\r\n    // useEffect(() =>{\r\n    //     console.log(props.pushToFavorites.length+\"   000000000000000000\")\r\n    // }, [props.pushToFavorites])\r\n\r\n    return (\r\n        <div>\r\n            <Menu />\r\n            <h1>FAVORITES</h1>\r\n            {\r\n                console.log('props.favorites', props.favorites),\r\n                props.favorites.map((fav) => (\r\n                    // console.log(fav),\r\n                    <WeatherToday weatherToday={fav} />\r\n                ))\r\n\r\n                // console.log(props.favorites)\r\n                // props.favorites.map((fav) =>(\r\n                //     <WeatherToday weatherToday ={fav}/>\r\n                // ))\r\n                //     <Grid container justifyContent=\"center\">\r\n                //     {props.favorites.map((fav) => (\r\n                //       <Grid>\r\n                //         <Paper className={`${classes.paper} weatherToNextDay`}>\r\n                //           {/* <span>date: {props.weatherForFive.Headline.EffectiveDate}</span> */}\r\n                //           {/* {console.log(props.weatherForFive)} */}\r\n                //           {/* {console.log(days[(new Date(props.weatherForFive.DailyForecasts[value].Date.substring(0, 10))).getDay()])} */}\r\n                //           {/* <span>{((new Date(props.weatherForFive.DailyForecasts[value].Date.substring(0, 10))))}</span> */}\r\n                //           {/* <span className=\"day\">{days[(new Date(props.weatherForFive.DailyForecasts[value].Date.substring(0, 10))).getDay()]}     </span> */}\r\n                //           <span className=\"c\">Min: {fav.Temperature?.Metric.Value}</span>\r\n                //           {/* <span className=\"max\">Max: {props.weatherForFive.DailyForecasts[value].Temperature?.Maximum.Value}</span> */}\r\n                //         </Paper>\r\n\r\n                //       </Grid>\r\n                //     ))}\r\n                //   </Grid>\r\n                // \r\n                // <WeatherForFavorite cityKey={'45253'} cityName='Teresina' />\r\n            }\r\n        </div>\r\n        // \r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        favorites: state.favorites,\r\n        currentWeather: state.currentWeather,\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        pushToFavorites: (favFromLocal) => dispatch(pushToFavorites(favFromLocal)),\r\n        get_from_axios: (location) => dispatch(get_from_axios(location)),\r\n    }\r\n    // return {get_from_axios: (cur) => dispatch(get_from_axios(cur)) }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);"]},"metadata":{},"sourceType":"module"}