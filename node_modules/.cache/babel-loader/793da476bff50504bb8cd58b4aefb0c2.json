{"ast":null,"code":"var _jsxFileName = \"F:\\\\programming\\\\\\u05E8\\u05D0\\u05D9\\u05D5\\u05E0\\u05D5\\u05EA\\\\project\\\\project\\\\src\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState, useContext } from 'react';\nimport Search from './Search';\nimport WeatherView from './WeatherView';\nimport TelAvivContext from './TelAvivContext';\nimport { get_from_axios, fetchDailyForecast, fetchSearchResult } from './actions';\nimport { connect } from 'react-redux';\nimport WeatherForFive from './SpacingGrid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Home({\n  currentWeather,\n  get_from_axios,\n  dailyForecasts,\n  fetchDailyForecast,\n  autocompleteResults,\n  fetchSearchResult\n}) {\n  _s();\n\n  let location = '215854';\n  let text = \"\"; // let txtToSearch = ''\n\n  const [textToSearch, setTextToSearch] = useState(\"\");\n\n  const getAxios = e => {\n    text = e;\n    fetchSearchResult(text);\n  };\n\n  const getContent = e => {\n    debugger;\n    console.log(e);\n  }; // useEffect(() => {\n  //     debugger;\n  //     console.log(textToSearch)\n  //     fetchSearchResult(textToSearch)\n  // }, textToSearch)\n\n\n  const getDataCity = r => {\n    console.log(r);\n    console.log(autocompleteResults);\n    console.log(text);\n    autocompleteResults.map(city => {\n      if (city.LocalizedName == 'Tehran') {\n        location = city.Key;\n      }\n    });\n    print(location);\n  };\n\n  useEffect(() => {\n    get_from_axios(location);\n    let num = 215854;\n    fetchDailyForecast(location); //num\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      list: \"browsers\",\n      name: \"inputCities\",\n      onfocusout: e => {\n        console.log(e);\n      },\n      onChange: e => {\n        getAxios(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), console.log(textToSearch), console.log(fetchSearchResult), /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: \"browsers\",\n      children: autocompleteResults ? autocompleteResults.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n        children: city.LocalizedName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this) // <option value={city.Key}>{city.LocalizedName}</option>\n      ) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"no data!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), console.log(currentWeather), /*#__PURE__*/_jsxDEV(WeatherForFive, {\n      weatherToday: currentWeather,\n      weatherForFive: dailyForecasts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"zY5noZmzCJVr8/WadZYHww72CfM=\");\n\n_c = Home;\n\nconst mapStateToProps = state => {\n  return {\n    currentWeather: state.currentWeather,\n    dailyForecasts: state.dailyForecasts,\n    autocompleteResults: state.autocompleteResults\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    get_from_axios: location => dispatch(get_from_axios(location)),\n    fetchDailyForecast: location => dispatch(fetchDailyForecast(location)),\n    fetchSearchResult: text => dispatch(fetchSearchResult(text))\n  }; // return {get_from_axios: (cur) => dispatch(get_from_axios(cur)) }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["F:/programming/ראיונות/project/project/src/Home.js"],"names":["React","createContext","useEffect","useState","useContext","Search","WeatherView","TelAvivContext","get_from_axios","fetchDailyForecast","fetchSearchResult","connect","WeatherForFive","Home","currentWeather","dailyForecasts","autocompleteResults","location","text","textToSearch","setTextToSearch","getAxios","e","getContent","console","log","getDataCity","r","map","city","LocalizedName","Key","print","num","target","value","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState, useContext } from 'react';\r\nimport Search from './Search';\r\nimport WeatherView from './WeatherView';\r\nimport TelAvivContext from './TelAvivContext';\r\nimport { get_from_axios, fetchDailyForecast, fetchSearchResult } from './actions'\r\nimport { connect } from 'react-redux';\r\nimport WeatherForFive from './SpacingGrid'\r\n\r\n\r\nfunction Home({ currentWeather, get_from_axios, dailyForecasts, fetchDailyForecast, autocompleteResults, fetchSearchResult }) {\r\n    let location = '215854'\r\n    let text = \"\"\r\n    // let txtToSearch = ''\r\n    const [textToSearch, setTextToSearch] = useState(\"\")\r\n    const getAxios = (e) => {\r\n        text = e\r\n        fetchSearchResult(text)\r\n    }\r\n\r\n    const getContent = (e) =>{\r\n        debugger\r\n        console.log(e)\r\n    }\r\n    // useEffect(() => {\r\n    //     debugger;\r\n    //     console.log(textToSearch)\r\n    //     fetchSearchResult(textToSearch)\r\n    // }, textToSearch)\r\n    const getDataCity = (r) =>{\r\n        console.log(r)\r\n        console.log(autocompleteResults)\r\n        console.log(text)\r\n        autocompleteResults.map(city =>{\r\n            if (city.LocalizedName == 'Tehran'){\r\n                location = city.Key\r\n            }\r\n        })\r\n        print(location)\r\n    }\r\n\r\n    useEffect(() => {\r\n        get_from_axios(location);\r\n        let num = 215854;\r\n        fetchDailyForecast(location);//num\r\n\r\n    }, [])\r\n    return (\r\n        <div>\r\n            {/* <Search /> */}\r\n\r\n            <input type=\"text\" list=\"browsers\" name=\"inputCities\" onfocusout={(e) => {console.log(e)}} onChange={(e) => { getAxios(e.target.value) }} />\r\n            {console.log(textToSearch)}\r\n            {console.log(fetchSearchResult)}\r\n            <datalist id=\"browsers\">\r\n                {autocompleteResults? autocompleteResults.map(city =>\r\n                (\r\n                    <option>{city.LocalizedName}</option>\r\n                    // <option value={city.Key}>{city.LocalizedName}</option>\r\n                )): <div>no data!</div>}\r\n            </datalist>\r\n\r\n            {console.log(currentWeather)}\r\n            {/* <TelAvivContext> */}\r\n            <WeatherForFive weatherToday={currentWeather} weatherForFive={dailyForecasts} />\r\n            {/* </TelAvivContext> */}\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentWeather: state.currentWeather,\r\n        dailyForecasts: state.dailyForecasts,\r\n        autocompleteResults: state.autocompleteResults\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        get_from_axios: (location) => dispatch(get_from_axios(location)),\r\n        fetchDailyForecast: (location) => dispatch(fetchDailyForecast(location)),\r\n        fetchSearchResult: (text) => dispatch(fetchSearchResult(text))\r\n    }\r\n    // return {get_from_axios: (cur) => dispatch(get_from_axios(cur)) }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);"]},"metadata":{},"sourceType":"module"}