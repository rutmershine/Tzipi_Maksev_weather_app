{"ast":null,"code":"var _jsxFileName = \"F:\\\\programming\\\\\\u05E8\\u05D0\\u05D9\\u05D5\\u05E0\\u05D5\\u05EA\\\\project\\\\project\\\\src\\\\SpacingGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport Paper from '@material-ui/core/Paper';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport IconButton from '@material-ui/core/IconButton';\nimport { telAvivContext } from './TelAvivContext';\nimport { forFiveTelAvivContext } from './ForFiveTelAvivContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    height: 140,\n    width: 100\n  },\n  control: {\n    padding: theme.spacing(2)\n  }\n}));\nexport default function SpacingGrid() {\n  _s();\n\n  const w = useContext(forFiveTelAvivContext);\n  const [weatherDays, setWeatherDays] = useState([]); // const w = useContext(telAvivContext);\n  // const [weatherToday, setWeatherToday] = useState([]);\n\n  debugger; // const [degreesToday, setDegreesToday] = useState([23.5]);\n  // const [city, setCity] = useState('Tel Aviv');\n  // const [degreesForFiveDays, setDegreesForFiveDays] = useState([21, 22, 23, 24, 25]);\n\n  const [spacing, setSpacing] = React.useState(7); // שליי\n  // const [degreesToday, setDegreesToday] = useState();\n  // \n\n  const classes = useStyles(); // useEffect(() => {\n  //   setWeatherToday(w)\n  // }, [w]);\n\n  useEffect(() => {\n    setWeatherDays(w);\n  }, [w]);\n\n  const handleChange = event => {\n    setSpacing(Number(event.target.value));\n  };\n\n  return weatherDays ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: weatherDays.map(x => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: x.Temperature\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 30\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 18\n  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"very sad\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this); // return (\n  //   weatherDays ? (\n  //     <Grid container className={classes.root} spacing={2}>\n  //       {console.log(weatherDays)}\n  //       {/* {weatherToday? console.log(weatherToday[0]): ''} */}\n  //       {/* {console.log(weatherToday[0]['Temperature'])} */}\n  //       <Grid item xs={12}>\n  //         <Grid container justifyContent=\"center\" >\n  //           <Paper className={`${classes.paper} today`}></Paper>\n  //           <IconButton className=\"addToFavorite\" aria-label=\"favorite\">\n  //             <FavoriteIcon />\n  //           </IconButton>\n  //         </Grid>\n  //         <Grid container justifyContent=\"center\" spacing={spacing}>\n  //           {[0, 1, 2, 3, 4].map((value) => (\n  //             <Grid key={value} item>\n  //               <Paper className={`${classes.paper} weatherToNextDay`}>\n  //                 <span>min: {weatherDays[value].Temperature.Minimum.Value}</span>\n  //                 <span>max: {weatherDays[value].Temperature.Maximum.Value}</span>\n  //               </Paper>\n  //             </Grid>\n  //           ))}\n  //         </Grid>\n  //       </Grid>\n  //       {/* <Grid item xs={12}>\n  //       <Paper className={classes.control}>\n  //         <Grid container>\n  //           <Grid item>\n  //             <FormLabel>spacing</FormLabel>\n  //             <RadioGroup\n  //               name=\"spacing\"\n  //               aria-label=\"spacing\"\n  //               value={spacing.toString()}\n  //               onChange={handleChange}\n  //               row\n  //             >\n  //               {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((value) => (\n  //                 <FormControlLabel\n  //                   key={value}\n  //                   value={value.toString()}\n  //                   control={<Radio />}\n  //                   label={value.toString()}\n  //                 />\n  //               ))}\n  //             </RadioGroup>\n  //           </Grid>\n  //         </Grid>\n  //       </Paper>\n  //     </Grid> */}\n  //     </Grid>)\n  //     : <h1>no data</h1>\n  // );\n}\n\n_s(SpacingGrid, \"Ucct/FbYlstpSqRBvYGKTW08Bes=\", false, function () {\n  return [useStyles];\n});\n\n_c = SpacingGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpacingGrid\");","map":{"version":3,"sources":["F:/programming/ראיונות/project/project/src/SpacingGrid.js"],"names":["React","useState","useContext","useEffect","makeStyles","Grid","FormLabel","FormControlLabel","RadioGroup","Radio","Paper","FavoriteIcon","IconButton","telAvivContext","forFiveTelAvivContext","useStyles","theme","root","flexGrow","paper","height","width","control","padding","spacing","SpacingGrid","w","weatherDays","setWeatherDays","setSpacing","classes","handleChange","event","Number","target","value","map","x","Temperature"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,qBAAT,QAAsC,yBAAtC;;AAGA,MAAMC,SAAS,GAAGX,UAAU,CAAEY,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN,GADiC;AAIvCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE,GADH;AAELC,IAAAA,KAAK,EAAE;AAFF,GAJgC;AAQvCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAEP,KAAK,CAACQ,OAAN,CAAc,CAAd;AADF;AAR8B,CAAZ,CAAD,CAA5B;AAaA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAMC,CAAC,GAAGxB,UAAU,CAACY,qBAAD,CAApB;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgC3B,QAAQ,CAAC,EAAD,CAA9C,CAFoC,CAGpC;AACA;;AACA,WALoC,CAMpC;AACA;AACA;;AACA,QAAM,CAACuB,OAAD,EAAUK,UAAV,IAAwB7B,KAAK,CAACC,QAAN,CAAe,CAAf,CAA9B,CAToC,CAUpC;AACA;AACA;;AACA,QAAM6B,OAAO,GAAGf,SAAS,EAAzB,CAboC,CAgBpC;AACA;AACA;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACdyB,IAAAA,cAAc,CAACF,CAAD,CAAd;AACD,GAFQ,EAEN,CAACA,CAAD,CAFM,CAAT;;AAGA,QAAMK,YAAY,GAAIC,KAAD,IAAW;AAC9BH,IAAAA,UAAU,CAACI,MAAM,CAACD,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAP,CAAV;AACD,GAFD;;AAIA,SACER,WAAW,gBAAE;AAAA,cAEVA,WAAW,CAACS,GAAZ,CAAgBC,CAAC,iBAAK;AAAA,gBACpBA,CAAC,CAACC;AADkB;AAAA;AAAA;AAAA;AAAA,YAAtB;AAFU;AAAA;AAAA;AAAA;AAAA,UAAF,gBAOX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UARF,CA1BoC,CAqCpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACD;;GA5FuBb,W;UAaNV,S;;;KAbMU,W","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { telAvivContext } from './TelAvivContext'\r\nimport { forFiveTelAvivContext } from './ForFiveTelAvivContext'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    height: 140,\r\n    width: 100,\r\n  },\r\n  control: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function SpacingGrid() {\r\n  const w = useContext(forFiveTelAvivContext);\r\n  const [weatherDays, setWeatherDays] = useState([]);\r\n  // const w = useContext(telAvivContext);\r\n  // const [weatherToday, setWeatherToday] = useState([]);\r\n  debugger;\r\n  // const [degreesToday, setDegreesToday] = useState([23.5]);\r\n  // const [city, setCity] = useState('Tel Aviv');\r\n  // const [degreesForFiveDays, setDegreesForFiveDays] = useState([21, 22, 23, 24, 25]);\r\n  const [spacing, setSpacing] = React.useState(7);\r\n  // שליי\r\n  // const [degreesToday, setDegreesToday] = useState();\r\n  // \r\n  const classes = useStyles();\r\n\r\n\r\n  // useEffect(() => {\r\n  //   setWeatherToday(w)\r\n  // }, [w]);\r\n  useEffect(() => {\r\n    setWeatherDays(w)\r\n  }, [w])\r\n  const handleChange = (event) => {\r\n    setSpacing(Number(event.target.value));\r\n  };\r\n\r\n  return (\r\n    weatherDays? <div>\r\n      {/* {console.log(weatherDays)} */}\r\n      {weatherDays.map(x => (<li>\r\n        {x.Temperature}\r\n      </li>)\r\n      )}\r\n    </div>:\r\n    <h1>very sad</h1>\r\n  )\r\n\r\n  // return (\r\n  //   weatherDays ? (\r\n  //     <Grid container className={classes.root} spacing={2}>\r\n  //       {console.log(weatherDays)}\r\n  //       {/* {weatherToday? console.log(weatherToday[0]): ''} */}\r\n  //       {/* {console.log(weatherToday[0]['Temperature'])} */}\r\n  //       <Grid item xs={12}>\r\n  //         <Grid container justifyContent=\"center\" >\r\n  //           <Paper className={`${classes.paper} today`}></Paper>\r\n  //           <IconButton className=\"addToFavorite\" aria-label=\"favorite\">\r\n  //             <FavoriteIcon />\r\n  //           </IconButton>\r\n\r\n  //         </Grid>\r\n  //         <Grid container justifyContent=\"center\" spacing={spacing}>\r\n  //           {[0, 1, 2, 3, 4].map((value) => (\r\n  //             <Grid key={value} item>\r\n  //               <Paper className={`${classes.paper} weatherToNextDay`}>\r\n  //                 <span>min: {weatherDays[value].Temperature.Minimum.Value}</span>\r\n  //                 <span>max: {weatherDays[value].Temperature.Maximum.Value}</span>\r\n  //               </Paper>\r\n\r\n  //             </Grid>\r\n  //           ))}\r\n  //         </Grid>\r\n  //       </Grid>\r\n  //       {/* <Grid item xs={12}>\r\n  //       <Paper className={classes.control}>\r\n  //         <Grid container>\r\n  //           <Grid item>\r\n  //             <FormLabel>spacing</FormLabel>\r\n  //             <RadioGroup\r\n  //               name=\"spacing\"\r\n  //               aria-label=\"spacing\"\r\n  //               value={spacing.toString()}\r\n  //               onChange={handleChange}\r\n  //               row\r\n  //             >\r\n  //               {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((value) => (\r\n  //                 <FormControlLabel\r\n  //                   key={value}\r\n  //                   value={value.toString()}\r\n  //                   control={<Radio />}\r\n  //                   label={value.toString()}\r\n  //                 />\r\n  //               ))}\r\n  //             </RadioGroup>\r\n  //           </Grid>\r\n  //         </Grid>\r\n  //       </Paper>\r\n  //     </Grid> */}\r\n  //     </Grid>)\r\n  //     : <h1>no data</h1>\r\n\r\n  // );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}