{"ast":null,"code":"var _jsxFileName = \"F:\\\\programming\\\\\\u05E8\\u05D0\\u05D9\\u05D5\\u05E0\\u05D5\\u05EA\\\\project\\\\project\\\\src\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState, useContext } from 'react';\nimport Search from './Search';\nimport WeatherView from './WeatherView';\nimport TelAvivContext from './TelAvivContext';\nimport { get_from_axios, fetchDailyForecast, fetchSearchResult } from './actions';\nimport { connect } from 'react-redux';\nimport WeatherForFive from './SpacingGrid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Home({\n  currentWeather,\n  get_from_axios,\n  dailyForecasts,\n  fetchDailyForecast,\n  autocompleteResults,\n  fetchSearchResult\n}) {\n  _s();\n\n  let location = '215854';\n  let text = \"\"; // let txtToSearch = ''\n\n  const [textToSearch, setTextToSearch] = useState(\"\");\n\n  const getAxios = e => {\n    console.log(e);\n    debugger;\n    text = e;\n    fetchSearchResult(text);\n  }; // useEffect(() => {\n  //     debugger;\n  //     console.log(textToSearch)\n  //     fetchSearchResult(textToSearch)\n  // }, textToSearch)\n\n\n  useEffect(() => {\n    get_from_axios(location);\n    let num = 215854;\n    fetchDailyForecast(location); //num\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      list: \"browsers\",\n      onChange: e => {\n        getAxios(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), console.log(textToSearch), console.log(fetchSearchResult), /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: \"browsers\",\n      children: [autocompleteResults ? autocompleteResults.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: city.Key,\n        children: city.LocalizedName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"no data!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Go\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"gol\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"gvdf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Googl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"IE9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), console.log(currentWeather), /*#__PURE__*/_jsxDEV(WeatherForFive, {\n      weatherToday: currentWeather,\n      weatherForFive: dailyForecasts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"zY5noZmzCJVr8/WadZYHww72CfM=\");\n\n_c = Home;\n\nconst mapStateToProps = state => {\n  return {\n    currentWeather: state.currentWeather,\n    dailyForecasts: state.dailyForecasts,\n    autocompleteResults: state.autocompleteResults\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    get_from_axios: location => dispatch(get_from_axios(location)),\n    fetchDailyForecast: location => dispatch(fetchDailyForecast(location)),\n    fetchSearchResult: text => dispatch(fetchSearchResult(text))\n  }; // return {get_from_axios: (cur) => dispatch(get_from_axios(cur)) }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["F:/programming/ראיונות/project/project/src/Home.js"],"names":["React","createContext","useEffect","useState","useContext","Search","WeatherView","TelAvivContext","get_from_axios","fetchDailyForecast","fetchSearchResult","connect","WeatherForFive","Home","currentWeather","dailyForecasts","autocompleteResults","location","text","textToSearch","setTextToSearch","getAxios","e","console","log","num","target","value","map","city","Key","LocalizedName","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState, useContext } from 'react';\r\nimport Search from './Search';\r\nimport WeatherView from './WeatherView';\r\nimport TelAvivContext from './TelAvivContext';\r\nimport { get_from_axios, fetchDailyForecast, fetchSearchResult } from './actions'\r\nimport { connect } from 'react-redux';\r\nimport WeatherForFive from './SpacingGrid'\r\n\r\n\r\nfunction Home({ currentWeather, get_from_axios, dailyForecasts, fetchDailyForecast, autocompleteResults, fetchSearchResult }) {\r\n    let location = '215854'\r\n    let text = \"\"\r\n    // let txtToSearch = ''\r\n    const [textToSearch, setTextToSearch] = useState(\"\")\r\n    const getAxios = (e) => {\r\n        console.log(e)\r\n        debugger;\r\n        text = e\r\n        fetchSearchResult(text)\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     debugger;\r\n    //     console.log(textToSearch)\r\n    //     fetchSearchResult(textToSearch)\r\n    // }, textToSearch)\r\n\r\n    useEffect(() => {\r\n        get_from_axios(location);\r\n        let num = 215854;\r\n        fetchDailyForecast(location);//num\r\n\r\n    }, [])\r\n    return (\r\n        <div>\r\n            {/* <Search /> */}\r\n\r\n            <input type=\"text\" list=\"browsers\" onChange={(e) => { getAxios(e.target.value) }} />\r\n            {console.log(textToSearch)}\r\n            {console.log(fetchSearchResult)}\r\n            <datalist id=\"browsers\">\r\n                {autocompleteResults? autocompleteResults.map(city =>\r\n                (\r\n                    <option value={city.Key}>{city.LocalizedName}</option>\r\n                )): <div>no data!</div>}\r\n                <option>Google</option>\r\n                <option>Go</option>\r\n                <option>gol</option>\r\n                <option>gvdf</option>\r\n                <option>Googl</option>\r\n                <option>IE9</option>\r\n            </datalist>\r\n\r\n            {console.log(currentWeather)}\r\n            {/* <TelAvivContext> */}\r\n            <WeatherForFive weatherToday={currentWeather} weatherForFive={dailyForecasts} />\r\n            {/* </TelAvivContext> */}\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentWeather: state.currentWeather,\r\n        dailyForecasts: state.dailyForecasts,\r\n        autocompleteResults: state.autocompleteResults\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        get_from_axios: (location) => dispatch(get_from_axios(location)),\r\n        fetchDailyForecast: (location) => dispatch(fetchDailyForecast(location)),\r\n        fetchSearchResult: (text) => dispatch(fetchSearchResult(text))\r\n    }\r\n    // return {get_from_axios: (cur) => dispatch(get_from_axios(cur)) }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);"]},"metadata":{},"sourceType":"module"}