{"ast":null,"code":"var _jsxFileName = \"F:\\\\programming\\\\\\u05E8\\u05D0\\u05D9\\u05D5\\u05E0\\u05D5\\u05EA\\\\project\\\\project\\\\src\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState, useContext } from 'react';\nimport Search from './Search';\nimport WeatherView from './WeatherView';\nimport TelAvivContext from './TelAvivContext';\nimport { get_from_axios, fetchDailyForecast, fetchSearchResult } from './actions';\nimport { connect } from 'react-redux';\nimport WeatherForFive from './SpacingGrid';\nimport weatherToday from './WeatherToday';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Home({\n  currentWeather,\n  get_from_axios,\n  dailyForecasts,\n  fetchDailyForecast,\n  autocompleteResults,\n  fetchSearchResult\n}) {\n  _s();\n\n  let location = '215854';\n  let text = \"Tel-Aviv\";\n  let exists = false;\n  const [cityName, setCityName] = useState('Tel-Aviv'); // let txtToSearch = ''\n  // const [textToSearch, setTextToSearch] = useState(\"Tel-Aviv\");\n\n  const getAxios = e => {\n    text = e;\n    fetchSearchResult(text);\n  }; // const getContent = (e) => {\n  //     debugger\n  //     console.log(e)\n  // }\n  // useEffect(() => {\n  //     debugger;\n  //     console.log(textToSearch)\n  //     fetchSearchResult(textToSearch)\n  // }, textToSearch)\n\n\n  const getDataCity = selectedCity => {\n    setCityName(selectedCity);\n    autocompleteResults.map(city => {\n      if (city.LocalizedName == selectedCity) {\n        location = city.Key;\n        exists = true; // text = selectedCity\n\n        debugger;\n      }\n    });\n\n    if (exists == true) {\n      get_from_axios(location);\n      fetchDailyForecast(location);\n    }\n  };\n\n  useEffect(() => {\n    get_from_axios(location);\n    let num = 215854;\n    fetchDailyForecast(location); //num\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"search\",\n      placeholder: \"Search...\",\n      type: \"text\",\n      list: \"browsers\",\n      name: \"inputCities\",\n      onfocusout: e => {\n        console.log(e);\n      },\n      onChange: e => {\n        getAxios(e.target.value);\n      },\n      onBlur: e => {\n        getDataCity(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      onClick: e => {\n        getDataCity();\n      },\n      children: \"gfgfg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), console.log(fetchSearchResult), /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: \"browsers\",\n      children: autocompleteResults ? autocompleteResults.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n        children: city.LocalizedName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"no data!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"AllView\",\n      children: [console.log(currentWeather), /*#__PURE__*/_jsxDEV(WeatherToday, {\n        weatherToday: currentWeather,\n        cityName: cityName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(WeatherForFive, {\n        weatherToday: currentWeather,\n        weatherForFive: dailyForecasts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"5sZ3XF3QAIbcj+ViTHhrVNeSrxI=\");\n\n_c = Home;\n\nconst mapStateToProps = state => {\n  return {\n    currentWeather: state.currentWeather,\n    dailyForecasts: state.dailyForecasts,\n    autocompleteResults: state.autocompleteResults\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    get_from_axios: location => dispatch(get_from_axios(location)),\n    fetchDailyForecast: location => dispatch(fetchDailyForecast(location)),\n    fetchSearchResult: text => dispatch(fetchSearchResult(text))\n  }; // return {get_from_axios: (cur) => dispatch(get_from_axios(cur)) }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["F:/programming/ראיונות/project/project/src/Home.js"],"names":["React","createContext","useEffect","useState","useContext","Search","WeatherView","TelAvivContext","get_from_axios","fetchDailyForecast","fetchSearchResult","connect","WeatherForFive","weatherToday","Home","currentWeather","dailyForecasts","autocompleteResults","location","text","exists","cityName","setCityName","getAxios","e","getDataCity","selectedCity","map","city","LocalizedName","Key","num","console","log","target","value","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState, useContext } from 'react';\r\nimport Search from './Search';\r\nimport WeatherView from './WeatherView';\r\nimport TelAvivContext from './TelAvivContext';\r\nimport { get_from_axios, fetchDailyForecast, fetchSearchResult } from './actions'\r\nimport { connect } from 'react-redux';\r\nimport WeatherForFive from './SpacingGrid'\r\nimport weatherToday from './WeatherToday'\r\n\r\n\r\nfunction Home({ currentWeather, get_from_axios, dailyForecasts, fetchDailyForecast, autocompleteResults, fetchSearchResult }) {\r\n    let location = '215854'\r\n    let text = \"Tel-Aviv\"\r\n    let exists = false\r\n    const [cityName, setCityName] = useState('Tel-Aviv')\r\n    // let txtToSearch = ''\r\n    // const [textToSearch, setTextToSearch] = useState(\"Tel-Aviv\");\r\n\r\n    const getAxios = (e) => {\r\n        text = e\r\n        fetchSearchResult(text)\r\n    }\r\n\r\n    // const getContent = (e) => {\r\n    //     debugger\r\n    //     console.log(e)\r\n    // }\r\n    // useEffect(() => {\r\n    //     debugger;\r\n    //     console.log(textToSearch)\r\n    //     fetchSearchResult(textToSearch)\r\n    // }, textToSearch)\r\n\r\n    const getDataCity = (selectedCity) => {\r\n        setCityName(selectedCity)\r\n        autocompleteResults.map(city => {\r\n            if (city.LocalizedName == selectedCity) {\r\n                location = city.Key\r\n                exists = true\r\n                // text = selectedCity\r\n                debugger;\r\n            }\r\n        })\r\n        if (exists == true) {\r\n            get_from_axios(location);\r\n            fetchDailyForecast(location);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        get_from_axios(location);\r\n        let num = 215854;\r\n        fetchDailyForecast(location);//num\r\n\r\n    }, [])\r\n    return (\r\n        <div>\r\n            {/* <Search /> */}\r\n            <input className=\"search\" placeholder=\"Search...\" type=\"text\" list=\"browsers\" name=\"inputCities\" onfocusout={(e) => { console.log(e) }}\r\n                onChange={(e) => { getAxios(e.target.value) }}\r\n                onBlur={(e) => { getDataCity(e.target.value) }} />\r\n            <button type=\"submit\" onClick={(e) => { getDataCity() }}>gfgfg</button>\r\n            {/* {console.log(textToSearch)} */}\r\n            {console.log(fetchSearchResult)}\r\n            <datalist id=\"browsers\">\r\n                {autocompleteResults ? autocompleteResults.map(city =>\r\n                (\r\n                    <option>{city.LocalizedName}</option>\r\n                )) : <div>no data!</div>}\r\n            </datalist>\r\n            <div className=\"AllView\">\r\n                {console.log(currentWeather)}\r\n                <WeatherToday weatherToday={currentWeather} cityName={cityName} />\r\n                <WeatherForFive weatherToday={currentWeather} weatherForFive={dailyForecasts} /></div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentWeather: state.currentWeather,\r\n        dailyForecasts: state.dailyForecasts,\r\n        autocompleteResults: state.autocompleteResults\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        get_from_axios: (location) => dispatch(get_from_axios(location)),\r\n        fetchDailyForecast: (location) => dispatch(fetchDailyForecast(location)),\r\n        fetchSearchResult: (text) => dispatch(fetchSearchResult(text))\r\n    }\r\n    // return {get_from_axios: (cur) => dispatch(get_from_axios(cur)) }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);"]},"metadata":{},"sourceType":"module"}