{"ast":null,"code":"var _jsxFileName = \"F:\\\\programming\\\\\\u05E8\\u05D0\\u05D9\\u05D5\\u05E0\\u05D5\\u05EA\\\\project\\\\project\\\\src\\\\Favorites.js\";\nimport React, { createContext, useEffect, useState, useContext, useStyles } from 'react'; // import AutomaticCities from './AutomaticCities';\n\nimport { connect } from 'react-redux';\nimport { get_from_axios } from './actions';\nimport WeatherToday from './WeatherToday';\nimport Try from './Try';\nimport WeatherForFavorite from './WeatherForFavorite';\nimport Menu from './Menu';\nimport { pushToFavorites } from './actions';\nimport Grid from '@material-ui/core/Grid';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport Paper from '@material-ui/core/Paper';\nimport WeatherCard from './WeatherCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Favorites(props) {\n  // const favorites = []\n  // let favoritesData = []\n  let location = '215854';\n  let data = {};\n  const favoritesFromLocal = localStorage['favorites'] ? JSON.parse(localStorage['favorites']) : []; // const classes = useStyles();\n  // const fetchFavoritesCities = () => {\n  //     if (localStorage.favorites) {\n  //         favorites = JSON.parse(localStorage.getItem('favorites'));\n  //         debugger;\n  //     }\n  // }\n  // useEffect(() => {\n  //     fetchFavoritesCities()\n  //     debugger;\n  // }, [])\n  // useEffect(() => {\n  //     const favoritesFromLocal = localStorage['favorites'] ? JSON.parse(localStorage['favorites']) : [];\n  //     // console.log(favoritesFromLocal)\n  //     favoritesFromLocal.map((fav) => {\n  //         location = fav.cityKey\n  //         console.log(location)\n  //         props.get_from_axios(location)\n  //         debugger;\n  //         data = props.currentWeather\n  //         console.log(data)\n  //         props.pushToFavorites(data)\n  //     })\n  // }, [])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Menu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"FAVORITES\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), favoritesFromLocal.map(f => /*#__PURE__*/_jsxDEV(WeatherCard, {\n      cityKey: f.cityKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }, this)) // console.log('props.favorites', props.favorites),\n    // props.favorites.map((fav) => (\n    //     // console.log(fav),\n    //     <WeatherToday weatherToday={fav} />\n    // ))\n    // console.log(props.favorites)\n    // props.favorites.map((fav) =>(\n    //     <WeatherToday weatherToday ={fav}/>\n    // ))\n    //     <Grid container justifyContent=\"center\">\n    //     {props.favorites.map((fav) => (\n    //       <Grid>\n    //         <Paper className={`${classes.paper} weatherToNextDay`}>\n    //           {/* <span>date: {props.weatherForFive.Headline.EffectiveDate}</span> */}\n    //           {/* {console.log(props.weatherForFive)} */}\n    //           {/* {console.log(days[(new Date(props.weatherForFive.DailyForecasts[value].Date.substring(0, 10))).getDay()])} */}\n    //           {/* <span>{((new Date(props.weatherForFive.DailyForecasts[value].Date.substring(0, 10))))}</span> */}\n    //           {/* <span className=\"day\">{days[(new Date(props.weatherForFive.DailyForecasts[value].Date.substring(0, 10))).getDay()]}     </span> */}\n    //           <span className=\"c\">Min: {fav.Temperature?.Metric.Value}</span>\n    //           {/* <span className=\"max\">Max: {props.weatherForFive.DailyForecasts[value].Temperature?.Maximum.Value}</span> */}\n    //         </Paper>\n    //       </Grid>\n    //     ))}\n    //   </Grid>\n    // \n    // <WeatherForFavorite cityKey={'45253'} cityName='Teresina' />\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this) // \n  ;\n}\n\n_c = Favorites;\n\nconst mapStateToProps = state => {\n  return {\n    favorites: state.favorites,\n    currentWeather: state.currentWeather\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    pushToFavorites: favFromLocal => dispatch(pushToFavorites(favFromLocal)),\n    get_from_axios: location => dispatch(get_from_axios(location))\n  }; // return {get_from_axios: (cur) => dispatch(get_from_axios(cur)) }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);\n\nvar _c;\n\n$RefreshReg$(_c, \"Favorites\");","map":{"version":3,"sources":["F:/programming/ראיונות/project/project/src/Favorites.js"],"names":["React","createContext","useEffect","useState","useContext","useStyles","connect","get_from_axios","WeatherToday","Try","WeatherForFavorite","Menu","pushToFavorites","Grid","FormLabel","FormControlLabel","RadioGroup","Radio","Paper","WeatherCard","Favorites","props","location","data","favoritesFromLocal","localStorage","JSON","parse","map","f","cityKey","mapStateToProps","state","favorites","currentWeather","mapDispatchToProps","dispatch","favFromLocal"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,EAAoDC,UAApD,EAAgEC,SAAhE,QAAiF,OAAjF,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACtB;AACA;AACA,MAAIC,QAAQ,GAAG,QAAf;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,QAAMC,kBAAkB,GAAGC,YAAY,CAAC,WAAD,CAAZ,GAA4BC,IAAI,CAACC,KAAL,CAAWF,YAAY,CAAC,WAAD,CAAvB,CAA5B,GAAoE,EAA/F,CALsB,CAOtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACI;AAAA,4BACI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAIQD,kBAAkB,CAACI,GAAnB,CAAuBC,CAAC,iBACpB,QAAC,WAAD;AAAa,MAAA,OAAO,EAAEA,CAAC,CAACC;AAAxB;AAAA;AAAA;AAAA;AAAA,YADJ,CAJR,CAQQ;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAnCR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAuCI;AAvCJ;AAyCH;;KA3EQV,S;;AA4ET,MAAMW,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHC,IAAAA,SAAS,EAAED,KAAK,CAACC,SADd;AAEHC,IAAAA,cAAc,EAAEF,KAAK,CAACE;AAFnB,GAAP;AAIH,CALD;;AAMA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHxB,IAAAA,eAAe,EAAGyB,YAAD,IAAkBD,QAAQ,CAACxB,eAAe,CAACyB,YAAD,CAAhB,CADxC;AAEH9B,IAAAA,cAAc,EAAGe,QAAD,IAAcc,QAAQ,CAAC7B,cAAc,CAACe,QAAD,CAAf;AAFnC,GAAP,CADmC,CAKnC;AACH,CAND;;AAOA,eAAehB,OAAO,CAACyB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6Cf,SAA7C,CAAf","sourcesContent":["import React, { createContext, useEffect, useState, useContext, useStyles } from 'react';\r\n// import AutomaticCities from './AutomaticCities';\r\nimport { connect } from 'react-redux';\r\nimport { get_from_axios } from './actions'\r\nimport WeatherToday from './WeatherToday'\r\nimport Try from './Try'\r\nimport WeatherForFavorite from './WeatherForFavorite';\r\nimport Menu from './Menu'\r\nimport { pushToFavorites } from './actions'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport WeatherCard from './WeatherCard';\r\n\r\n\r\nfunction Favorites(props) {\r\n    // const favorites = []\r\n    // let favoritesData = []\r\n    let location = '215854'\r\n    let data = {}\r\n    const favoritesFromLocal = localStorage['favorites'] ? JSON.parse(localStorage['favorites']) : [];\r\n\r\n    // const classes = useStyles();\r\n\r\n    // const fetchFavoritesCities = () => {\r\n    //     if (localStorage.favorites) {\r\n    //         favorites = JSON.parse(localStorage.getItem('favorites'));\r\n    //         debugger;\r\n    //     }\r\n    // }\r\n    // useEffect(() => {\r\n    //     fetchFavoritesCities()\r\n    //     debugger;\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     const favoritesFromLocal = localStorage['favorites'] ? JSON.parse(localStorage['favorites']) : [];\r\n    //     // console.log(favoritesFromLocal)\r\n    //     favoritesFromLocal.map((fav) => {\r\n    //         location = fav.cityKey\r\n    //         console.log(location)\r\n    //         props.get_from_axios(location)\r\n    //         debugger;\r\n    //         data = props.currentWeather\r\n    //         console.log(data)\r\n    //         props.pushToFavorites(data)\r\n    //     })\r\n    // }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Menu />\r\n            <h1>FAVORITES</h1>\r\n            {\r\n                favoritesFromLocal.map(f =>(\r\n                    <WeatherCard cityKey={f.cityKey}/>\r\n\r\n                    ))\r\n                // console.log('props.favorites', props.favorites),\r\n                // props.favorites.map((fav) => (\r\n                //     // console.log(fav),\r\n                //     <WeatherToday weatherToday={fav} />\r\n                // ))\r\n\r\n                // console.log(props.favorites)\r\n                // props.favorites.map((fav) =>(\r\n                //     <WeatherToday weatherToday ={fav}/>\r\n                // ))\r\n                //     <Grid container justifyContent=\"center\">\r\n                //     {props.favorites.map((fav) => (\r\n                //       <Grid>\r\n                //         <Paper className={`${classes.paper} weatherToNextDay`}>\r\n                //           {/* <span>date: {props.weatherForFive.Headline.EffectiveDate}</span> */}\r\n                //           {/* {console.log(props.weatherForFive)} */}\r\n                //           {/* {console.log(days[(new Date(props.weatherForFive.DailyForecasts[value].Date.substring(0, 10))).getDay()])} */}\r\n                //           {/* <span>{((new Date(props.weatherForFive.DailyForecasts[value].Date.substring(0, 10))))}</span> */}\r\n                //           {/* <span className=\"day\">{days[(new Date(props.weatherForFive.DailyForecasts[value].Date.substring(0, 10))).getDay()]}     </span> */}\r\n                //           <span className=\"c\">Min: {fav.Temperature?.Metric.Value}</span>\r\n                //           {/* <span className=\"max\">Max: {props.weatherForFive.DailyForecasts[value].Temperature?.Maximum.Value}</span> */}\r\n                //         </Paper>\r\n\r\n                //       </Grid>\r\n                //     ))}\r\n                //   </Grid>\r\n                // \r\n                // <WeatherForFavorite cityKey={'45253'} cityName='Teresina' />\r\n            }\r\n        </div>\r\n        // \r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        favorites: state.favorites,\r\n        currentWeather: state.currentWeather,\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        pushToFavorites: (favFromLocal) => dispatch(pushToFavorites(favFromLocal)),\r\n        get_from_axios: (location) => dispatch(get_from_axios(location)),\r\n    }\r\n    // return {get_from_axios: (cur) => dispatch(get_from_axios(cur)) }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);"]},"metadata":{},"sourceType":"module"}