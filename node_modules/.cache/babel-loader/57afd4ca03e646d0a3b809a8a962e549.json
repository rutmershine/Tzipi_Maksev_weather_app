{"ast":null,"code":"var _jsxFileName = \"F:\\\\programming\\\\\\u05E8\\u05D0\\u05D9\\u05D5\\u05E0\\u05D5\\u05EA\\\\project\\\\project\\\\src\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState, useContext, useRef, useStyles } from 'react';\nimport Search from './Search';\nimport WeatherView from './WeatherView';\nimport TelAvivContext from './TelAvivContext';\nimport { get_from_axios, fetchDailyForecast, fetchSearchResult } from './actions';\nimport { connect } from 'react-redux';\nimport WeatherForFive from './SpacingGrid';\nimport WeatherToday from './WeatherToday';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Button } from '@material-ui/core';\nimport Fab from '@material-ui/core/Fab';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport clsx from 'clsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Home({\n  currentWeather,\n  get_from_axios,\n  dailyForecasts,\n  fetchDailyForecast,\n  autocompleteResults,\n  fetchSearchResult\n}) {\n  _s();\n\n  let location = '215854';\n  let text = \"Tel-Aviv\";\n  let exists = false;\n  const classes = useStyles();\n  const [cityName, setCityName] = useState('Tel-Aviv');\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const timer = useRef(); // let txtToSearch = ''\n  // const [textToSearch, setTextToSearch] = useState(\"Tel-Aviv\");\n\n  const getAxios = e => {\n    text = e;\n    debugger;\n    fetchSearchResult(text);\n  };\n\n  const addToFavorites = () => {\n    let fav = [];\n    let city = {\n      cityName,\n      location\n    };\n\n    if (localStorage.favorites) {\n      fav = JSON.parse(localStorage.getItem('favorites'));\n    }\n\n    fav.push(city);\n    localStorage.setItem('favorites', JSON.stringify(fav));\n    console.log(city);\n\n    if (!loading) {\n      setSuccess(false);\n      setLoading(true);\n      timer.current = window.setTimeout(() => {\n        setSuccess(true);\n        setLoading(false);\n      }, 2000);\n    }\n  };\n\n  const buttonClassname = clsx({\n    [classes.buttonSuccess]: success\n  }); // const getContent = (e) => {\n  //     debugger\n  //     console.log(e)\n  // }\n  // useEffect(() => {\n  //     debugger;\n  //     console.log(textToSearch)\n  //     fetchSearchResult(textToSearch)\n  // }, textToSearch)\n\n  const getDataCity = selectedCity => {\n    setCityName(selectedCity);\n    autocompleteResults === null || autocompleteResults === void 0 ? void 0 : autocompleteResults.map(city => {\n      if (city.LocalizedName == selectedCity) {\n        location = city.Key;\n        exists = true; // text = selectedCity\n\n        debugger;\n      }\n    });\n\n    if (exists == true) {\n      get_from_axios(location);\n      fetchDailyForecast(location);\n    }\n  };\n\n  useEffect(() => {\n    get_from_axios(location);\n    fetchDailyForecast(location);\n  }, []);\n  useEffect(() => {\n    return () => {\n      clearTimeout(timer.current);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"search\",\n      placeholder: \"Search...\",\n      type: \"text\",\n      list: \"browsers\",\n      name: \"inputCities\",\n      onfocusout: e => {\n        console.log(e);\n      },\n      onChange: e => {\n        getAxios(e.target.value);\n      },\n      onBlur: e => {\n        getDataCity(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), console.log(fetchSearchResult), /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: \"browsers\",\n      children: autocompleteResults ? autocompleteResults.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n        children: city.LocalizedName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"no data!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"blue\",\n      className: buttonClassname // disabled={}\n      ,\n      onClick: addToFavorites,\n      children: \"Add To Favorites\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n      size: 24,\n      className: classes.buttonProgress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(Fab, {\n      \"aria-label\": \"save\",\n      color: \"blue\",\n      className: buttonClassname,\n      onClick: addToFavorites,\n      children: success ? /*#__PURE__*/_jsxDEV(CheckIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 28\n      }, this) : /*#__PURE__*/_jsxDEV(FavoriteIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 44\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n      size: 68,\n      className: classes.fabProgress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"AllView\",\n      children: [console.log(currentWeather), /*#__PURE__*/_jsxDEV(WeatherToday, {\n        weatherToday: currentWeather,\n        cityName: cityName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(WeatherForFive, {\n        weatherToday: currentWeather,\n        weatherForFive: dailyForecasts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"7bhpQ8B22LCl87PDkCMuaRVcDeE=\", false, function () {\n  return [useStyles];\n});\n\n_c = Home;\n\nconst mapStateToProps = state => {\n  return {\n    currentWeather: state.currentWeather,\n    dailyForecasts: state.dailyForecasts,\n    autocompleteResults: state.autocompleteResults\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    get_from_axios: location => dispatch(get_from_axios(location)),\n    fetchDailyForecast: location => dispatch(fetchDailyForecast(location)),\n    fetchSearchResult: text => dispatch(fetchSearchResult(text))\n  }; // return {get_from_axios: (cur) => dispatch(get_from_axios(cur)) }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["F:/programming/ראיונות/project/project/src/Home.js"],"names":["React","createContext","useEffect","useState","useContext","useRef","useStyles","Search","WeatherView","TelAvivContext","get_from_axios","fetchDailyForecast","fetchSearchResult","connect","WeatherForFive","WeatherToday","FavoriteIcon","IconButton","Button","Fab","CheckIcon","CircularProgress","clsx","Home","currentWeather","dailyForecasts","autocompleteResults","location","text","exists","classes","cityName","setCityName","success","setSuccess","loading","setLoading","timer","getAxios","e","addToFavorites","fav","city","localStorage","favorites","JSON","parse","getItem","push","setItem","stringify","console","log","current","window","setTimeout","buttonClassname","buttonSuccess","getDataCity","selectedCity","map","LocalizedName","Key","clearTimeout","target","value","buttonProgress","fabProgress","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState, useContext, useRef, useStyles } from 'react';\r\nimport Search from './Search';\r\nimport WeatherView from './WeatherView';\r\nimport TelAvivContext from './TelAvivContext';\r\nimport { get_from_axios, fetchDailyForecast, fetchSearchResult } from './actions'\r\nimport { connect } from 'react-redux';\r\nimport WeatherForFive from './SpacingGrid'\r\nimport WeatherToday from './WeatherToday'\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Button } from '@material-ui/core';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport clsx from 'clsx';\r\n\r\n\r\nfunction Home({ currentWeather, get_from_axios, dailyForecasts, fetchDailyForecast, autocompleteResults, fetchSearchResult }) {\r\n    let location = '215854'\r\n    let text = \"Tel-Aviv\"\r\n    let exists = false\r\n    const classes = useStyles();\r\n    const [cityName, setCityName] = useState('Tel-Aviv')\r\n    const [success, setSuccess] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const timer = useRef();\r\n\r\n\r\n    // let txtToSearch = ''\r\n    // const [textToSearch, setTextToSearch] = useState(\"Tel-Aviv\");\r\n\r\n    const getAxios = (e) => {\r\n        text = e\r\n        debugger;\r\n        fetchSearchResult(text)\r\n    }\r\n\r\n    const addToFavorites = () => {\r\n        let fav = []\r\n        let city = { cityName, location }\r\n        if (localStorage.favorites) {\r\n            fav = JSON.parse(localStorage.getItem('favorites'));\r\n        }\r\n        fav.push(city);\r\n        localStorage.setItem('favorites', JSON.stringify(fav));\r\n        console.log(city);\r\n\r\n        if (!loading) {\r\n            setSuccess(false);\r\n            setLoading(true);\r\n            timer.current = window.setTimeout(() => {\r\n                setSuccess(true);\r\n                setLoading(false);\r\n\r\n            }, 2000);\r\n        }\r\n    }\r\n    const buttonClassname = clsx({\r\n        [classes.buttonSuccess]: success,\r\n    });\r\n\r\n    // const getContent = (e) => {\r\n    //     debugger\r\n    //     console.log(e)\r\n    // }\r\n    // useEffect(() => {\r\n    //     debugger;\r\n    //     console.log(textToSearch)\r\n    //     fetchSearchResult(textToSearch)\r\n    // }, textToSearch)\r\n\r\n    const getDataCity = (selectedCity) => {\r\n        setCityName(selectedCity)\r\n        autocompleteResults?.map(city => {\r\n            if (city.LocalizedName == selectedCity) {\r\n                location = city.Key\r\n                exists = true\r\n                // text = selectedCity\r\n                debugger;\r\n            }\r\n        })\r\n        if (exists == true) {\r\n            get_from_axios(location);\r\n            fetchDailyForecast(location);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        get_from_axios(location);\r\n        fetchDailyForecast(location);\r\n\r\n    }, [])\r\n    useEffect(() => {\r\n        return () => {\r\n            clearTimeout(timer.current);\r\n        };\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <input className=\"search\" placeholder=\"Search...\" type=\"text\" list=\"browsers\" name=\"inputCities\" onfocusout={(e) => { console.log(e) }}\r\n                onChange={(e) => { getAxios(e.target.value) }}\r\n                onBlur={(e) => { getDataCity(e.target.value) }} />\r\n            {/* {console.log(textToSearch)} */}\r\n            {console.log(fetchSearchResult)}\r\n            <datalist id=\"browsers\">\r\n                {autocompleteResults ? autocompleteResults.map(city =>\r\n                (\r\n                    <option>{city.LocalizedName}</option>\r\n                )) : <div>no data!</div>}\r\n            </datalist>\r\n            {/* <IconButton className=\"addToFavorite\" aria-label=\"favorite\" onClick={() =>{}}>\r\n            <FavoriteIcon />\r\n          </IconButton> */}\r\n            {/* <Button variant=\"outlined\" color=\"primary\">\r\n                Add ro Favorite\r\n            </Button> */}\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"blue\"\r\n                className={buttonClassname}\r\n                // disabled={}\r\n                onClick={addToFavorites}\r\n            >\r\n                Add To Favorites\r\n            </Button>\r\n            {loading && <CircularProgress size={24} className={classes.buttonProgress} />}\r\n\r\n            <Fab\r\n                aria-label=\"save\"\r\n                color=\"blue\"\r\n                className={buttonClassname}\r\n                onClick={addToFavorites}\r\n            >\r\n                {success ? <CheckIcon /> : <FavoriteIcon />}\r\n            </Fab>\r\n            {loading && <CircularProgress size={68} className={classes.fabProgress} />}\r\n            <div className=\"AllView\">\r\n                {console.log(currentWeather)}\r\n                <WeatherToday weatherToday={currentWeather} cityName={cityName} />\r\n                <WeatherForFive weatherToday={currentWeather} weatherForFive={dailyForecasts} /></div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentWeather: state.currentWeather,\r\n        dailyForecasts: state.dailyForecasts,\r\n        autocompleteResults: state.autocompleteResults\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        get_from_axios: (location) => dispatch(get_from_axios(location)),\r\n        fetchDailyForecast: (location) => dispatch(fetchDailyForecast(location)),\r\n        fetchSearchResult: (text) => dispatch(fetchSearchResult(text))\r\n    }\r\n    // return {get_from_axios: (cur) => dispatch(get_from_axios(cur)) }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);"]},"metadata":{},"sourceType":"module"}