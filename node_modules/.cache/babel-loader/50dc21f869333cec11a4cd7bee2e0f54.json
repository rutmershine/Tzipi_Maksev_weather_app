{"ast":null,"code":"var _jsxFileName = \"F:\\\\programming\\\\\\u05E8\\u05D0\\u05D9\\u05D5\\u05E0\\u05D5\\u05EA\\\\project\\\\project\\\\src\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState, useContext } from 'react';\nimport Search from './Search';\nimport WeatherView from './WeatherView';\nimport TelAvivContext from './TelAvivContext';\nimport { get_from_axios, fetchDailyForecast, fetchSearchResult } from './actions';\nimport { connect } from 'react-redux';\nimport WeatherForFive from './SpacingGrid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Home({\n  currentWeather,\n  get_from_axios,\n  dailyForecasts,\n  fetchDailyForecast,\n  autocompleteResults,\n  fetchSearchResult\n}) {\n  _s();\n\n  let location = '215854';\n  let txtToSearch = '';\n  useEffect(() => {\n    get_from_axios(location);\n    let num = 215854;\n    fetchDailyForecast(location); //num\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      list: \"browsers\",\n      onChange: e => txtToSearch = e.target.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), console.log(txtToSearch), /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: \"browsers\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Go\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"gollll\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"gvdf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Googl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"IE9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), console.log(currentWeather), /*#__PURE__*/_jsxDEV(WeatherForFive, {\n      weatherToday: currentWeather,\n      weatherForFive: dailyForecasts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Home;\n\nconst mapStateToProps = state => {\n  return {\n    currentWeather: state.currentWeather,\n    dailyForecasts: state.dailyForecasts,\n    autocompleteResults: state.autocompleteResults\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    get_from_axios: location => dispatch(get_from_axios(location)),\n    fetchDailyForecast: location => dispatch(fetchDailyForecast(location)),\n    fetchSearchResult: txtToSearch => dispatch(fetchSearchResult(txtToSearch))\n  }; // return {get_from_axios: (cur) => dispatch(get_from_axios(cur)) }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["F:/programming/ראיונות/project/project/src/Home.js"],"names":["React","createContext","useEffect","useState","useContext","Search","WeatherView","TelAvivContext","get_from_axios","fetchDailyForecast","fetchSearchResult","connect","WeatherForFive","Home","currentWeather","dailyForecasts","autocompleteResults","location","txtToSearch","num","e","target","value","console","log","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,EAAoDC,UAApD,QAAsE,OAAtE;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,cAAT,EAAyBC,kBAAzB,EAA6CC,iBAA7C,QAAsE,WAAtE;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,cAAP,MAA2B,eAA3B;;;AAGA,SAASC,IAAT,CAAc;AAAEC,EAAAA,cAAF;AAAkBN,EAAAA,cAAlB;AAAkCO,EAAAA,cAAlC;AAAkDN,EAAAA,kBAAlD;AAAsEO,EAAAA,mBAAtE;AAA2FN,EAAAA;AAA3F,CAAd,EAA8H;AAAA;;AAC1H,MAAIO,QAAQ,GAAG,QAAf;AACA,MAAIC,WAAW,GAAG,EAAlB;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,cAAc,CAACS,QAAD,CAAd;AACA,QAAIE,GAAG,GAAG,MAAV;AACAV,IAAAA,kBAAkB,CAACQ,QAAD,CAAlB,CAHY,CAGiB;AAEhC,GALQ,EAKN,EALM,CAAT;AAMA,sBACI;AAAA,4BAGI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,UAAxB;AAAmC,MAAA,QAAQ,EAAGG,CAAD,IAAOF,WAAW,GAAGE,CAAC,CAACC,MAAF,CAASC;AAA3E;AAAA;AAAA;AAAA;AAAA,YAHJ,EAIKC,OAAO,CAACC,GAAR,CAAYN,WAAZ,CAJL,eAKI;AAAU,MAAA,EAAE,EAAC,UAAb;AAAA,8BAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,EAcKK,OAAO,CAACC,GAAR,CAAYV,cAAZ,CAdL,eAgBI,QAAC,cAAD;AAAgB,MAAA,YAAY,EAAEA,cAA9B;AAA8C,MAAA,cAAc,EAAEC;AAA9D;AAAA;AAAA;AAAA;AAAA,YAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBH;;GAhCQF,I;;KAAAA,I;;AAkCT,MAAMY,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHZ,IAAAA,cAAc,EAAEY,KAAK,CAACZ,cADnB;AAEHC,IAAAA,cAAc,EAAEW,KAAK,CAACX,cAFnB;AAGHC,IAAAA,mBAAmB,EAAEU,KAAK,CAACV;AAHxB,GAAP;AAKH,CAND;;AAQA,MAAMW,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHpB,IAAAA,cAAc,EAAGS,QAAD,IAAcW,QAAQ,CAACpB,cAAc,CAACS,QAAD,CAAf,CADnC;AAEHR,IAAAA,kBAAkB,EAAGQ,QAAD,IAAcW,QAAQ,CAACnB,kBAAkB,CAACQ,QAAD,CAAnB,CAFvC;AAGHP,IAAAA,iBAAiB,EAAGQ,WAAD,IAAiBU,QAAQ,CAAClB,iBAAiB,CAACQ,WAAD,CAAlB;AAHzC,GAAP,CADmC,CAMnC;AACH,CAPD;;AAQA,eAAeP,OAAO,CAACc,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cd,IAA7C,CAAf","sourcesContent":["import React, { createContext, useEffect, useState, useContext } from 'react';\r\nimport Search from './Search';\r\nimport WeatherView from './WeatherView';\r\nimport TelAvivContext from './TelAvivContext';\r\nimport { get_from_axios, fetchDailyForecast, fetchSearchResult } from './actions'\r\nimport { connect } from 'react-redux';\r\nimport WeatherForFive from './SpacingGrid'\r\n\r\n\r\nfunction Home({ currentWeather, get_from_axios, dailyForecasts, fetchDailyForecast, autocompleteResults, fetchSearchResult }) {\r\n    let location = '215854'\r\n    let txtToSearch = ''\r\n    useEffect(() => {\r\n        get_from_axios(location);\r\n        let num = 215854;\r\n        fetchDailyForecast(location);//num\r\n\r\n    }, [])\r\n    return (\r\n        <div>\r\n            {/* <Search /> */}\r\n            \r\n            <input type=\"text\" list=\"browsers\" onChange={(e) => txtToSearch = e.target.value}/>\r\n            {console.log(txtToSearch)}\r\n            <datalist id=\"browsers\">\r\n                \r\n                <option>Google</option>\r\n                <option>Go</option>\r\n                <option>gollll</option>\r\n                <option>gvdf</option>\r\n                <option>Googl</option>\r\n                <option>IE9</option>\r\n            </datalist>\r\n            {console.log(currentWeather)}\r\n            {/* <TelAvivContext> */}\r\n            <WeatherForFive weatherToday={currentWeather} weatherForFive={dailyForecasts} />\r\n            {/* </TelAvivContext> */}\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentWeather: state.currentWeather,\r\n        dailyForecasts: state.dailyForecasts,\r\n        autocompleteResults: state.autocompleteResults\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        get_from_axios: (location) => dispatch(get_from_axios(location)),\r\n        fetchDailyForecast: (location) => dispatch(fetchDailyForecast(location)),\r\n        fetchSearchResult: (txtToSearch) => dispatch(fetchSearchResult(txtToSearch))\r\n    }\r\n    // return {get_from_axios: (cur) => dispatch(get_from_axios(cur)) }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);"]},"metadata":{},"sourceType":"module"}