{"ast":null,"code":"var _jsxFileName = \"F:\\\\programming\\\\\\u05E8\\u05D0\\u05D9\\u05D5\\u05E0\\u05D5\\u05EA\\\\project\\\\project\\\\src\\\\WeatherCard.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { fetchCurrentWeather, addFavoriteWeatherAction, addFavoriteWeather, fetchDailyForecast, fetchSearchResult } from '../actions';\nimport { connect } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { get_from_axios, pushToFavorites } from './actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345\n  }\n});\nlet count = 0; // export default function ImgMediaCard(props) {\n\nfunction WeatherCard(props) {\n  _s();\n\n  var _props$favoritesWeath, _props$favoritesWeath2, _props$favoritesWeath3, _props$favoritesWeath4;\n\n  // let [myCurrent, setMyCurrent] = useState('');\n  let myCurrent = '';\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: `${classes.root} small_card`,\n    children: [/*#__PURE__*/_jsxDEV(CardActionArea, {\n      children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n        component: \"img\",\n        alt: \"Contemplative Reptile\",\n        height: \"140\" //   height=\"10\"\n        ,\n        image: \"./pics/night.png\",\n        title: \"Contemplative Reptile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          gutterBottom: true,\n          variant: \"h5\",\n          component: \"h2\",\n          children: props.selectedCityName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          component: \"p\",\n          children: props.favoritesWeather ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: [\"Temperature: \", (_props$favoritesWeath = props.favoritesWeather[count]) === null || _props$favoritesWeath === void 0 ? void 0 : (_props$favoritesWeath2 = _props$favoritesWeath.Temperature) === null || _props$favoritesWeath2 === void 0 ? void 0 : _props$favoritesWeath2.Metric.Value]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: (_props$favoritesWeath3 = props.favoritesWeather[count]) === null || _props$favoritesWeath3 === void 0 ? void 0 : _props$favoritesWeath3.WeatherText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: ((_props$favoritesWeath4 = props.favoritesWeather[count]) === null || _props$favoritesWeath4 === void 0 ? void 0 : _props$favoritesWeath4.IsDayTime) ? 'Day' : 'Night'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"no data!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        color: \"primary\",\n        children: \"ADD TO FAVORITES\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WeatherCard, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = WeatherCard;\n\nconst mapStateToProps = state => {\n  return {\n    favorites: state.favorites,\n    currentWeather: state.currentWeather\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    pushToFavorites: favFromLocal => dispatch(pushToFavorites(favFromLocal)),\n    get_from_axios: location => dispatch(get_from_axios(location))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherCard);\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherCard\");","map":{"version":3,"sources":["F:/programming/ראיונות/project/project/src/WeatherCard.js"],"names":["React","makeStyles","Card","CardActionArea","CardActions","CardContent","CardMedia","Button","Typography","fetchCurrentWeather","addFavoriteWeatherAction","addFavoriteWeather","fetchDailyForecast","fetchSearchResult","connect","useEffect","useState","get_from_axios","pushToFavorites","useStyles","root","maxWidth","count","WeatherCard","props","myCurrent","classes","selectedCityName","favoritesWeather","Temperature","Metric","Value","WeatherText","IsDayTime","mapStateToProps","state","favorites","currentWeather","mapDispatchToProps","dispatch","favFromLocal","location"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { fetchCurrentWeather, addFavoriteWeatherAction, addFavoriteWeather, fetchDailyForecast, fetchSearchResult } from '../actions'\r\nimport { connect } from 'react-redux';\r\nimport { useEffect, useState } from 'react'\r\nimport { get_from_axios, pushToFavorites } from './actions'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n});\r\n\r\nlet count = 0;\r\n\r\n// export default function ImgMediaCard(props) {\r\nfunction WeatherCard(props) {\r\n\r\n  // let [myCurrent, setMyCurrent] = useState('');\r\n  let myCurrent = '';\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={`${classes.root} small_card`}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          component=\"img\"\r\n          alt=\"Contemplative Reptile\"\r\n          height=\"140\"\r\n          //   height=\"10\"\r\n          image=\"./pics/night.png\"\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {props.selectedCityName}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            {/* Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\r\n            across all continents except Antarctica */}\r\n            {/* <h1>Temperature: {props.currentWeather.Temperature?.Metric.Value}</h1>\r\n            <h2>{props.currentWeather.WeatherText}</h2>\r\n            <h2>{props.currentWeather.IsDayTime ? 'Day' : 'Night'}</h2> */}\r\n\r\n            {/* good */}\r\n            {/* <h1>Temperature: {props.currentWeather?.Temperature?.Metric.Value}</h1>\r\n            <h2>{props.currentWeather?.WeatherText}</h2>\r\n            <h2>{props.currentWeather?.IsDayTime ? 'Day' : 'Night'}</h2> */}\r\n\r\n\r\n            {/* <h1>Temperature: {myCurrent?.Temperature?.Metric.Value}</h1>\r\n            <h2>{myCurrent?.WeatherText}</h2>\r\n            <h2>{myCurrent?.IsDayTime ? 'Day' : 'Night'}</h2> */}\r\n\r\n            {props.favoritesWeather ?\r\n              <div>\r\n\r\n                <h1>Temperature: {props.favoritesWeather[count]?.Temperature?.Metric.Value}</h1>\r\n                <h2>{props.favoritesWeather[count]?.WeatherText}</h2>\r\n                <h2>{props.favoritesWeather[count]?.IsDayTime ? 'Day' : 'Night'}</h2>\r\n              </div> : <h2>no data!</h2>\r\n            }\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Button size=\"small\" color=\"primary\">\r\n          ADD TO FAVORITES\r\n        </Button>\r\n        {/* <Button size=\"small\" color=\"primary\">\r\n          Learn More\r\n        </Button> */}\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    favorites: state.favorites,\r\n    currentWeather: state.currentWeather,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    pushToFavorites: (favFromLocal) => dispatch(pushToFavorites(favFromLocal)),\r\n    get_from_axios: (location) => dispatch(get_from_axios(location)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherCard);\r\n"]},"metadata":{},"sourceType":"module"}